/*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 */

let add_pet = (~body) => {
  open Lwt;
  let uri = Request.build_uri("/pet");
  let headers = Request.default_headers;
  let body = Request.write_as_json_body(Pet.to_yojson, body);
  Cohttp_lwt_unix.Client.call(`POST, uri, ~headers, ~body)
  >>= (((resp, body)) => Request.handle_unit_response(resp));
};

let delete_pet = (~pet_id, ~api_key=?, ()) => {
  open Lwt;
  let uri = Request.build_uri("/pet/{petId}");
  let headers = Request.default_headers;
  let headers = Request.maybe_add_header(headers, "api_key", x => x, api_key);
  let uri = Request.replace_path_param(uri, "petId", Int64.to_string, pet_id);
  Cohttp_lwt_unix.Client.call(`DELETE, uri, ~headers)
  >>= (((resp, body)) => Request.handle_unit_response(resp));
};

let find_pets_by_status = (~status) => {
  open Lwt;
  let uri = Request.build_uri("/pet/findByStatus");
  let headers = Request.default_headers;
  let uri =
    Request.add_query_param_list(
      uri,
      "status",
      List.map(Enums.show_pet_status),
      status,
    );
  Cohttp_lwt_unix.Client.call(`GET, uri, ~headers)
  >>= (
    ((resp, body)) =>
      Request.read_json_body_as_list_of(
        JsonSupport.unwrap(Pet.of_yojson),
        resp,
        body,
      )
  );
};

let find_pets_by_tags = (~tags) => {
  open Lwt;
  let uri = Request.build_uri("/pet/findByTags");
  let headers = Request.default_headers;
  let uri = Request.add_query_param_list(uri, "tags", List.map(x => x), tags);
  Cohttp_lwt_unix.Client.call(`GET, uri, ~headers)
  >>= (
    ((resp, body)) =>
      Request.read_json_body_as_list_of(
        JsonSupport.unwrap(Pet.of_yojson),
        resp,
        body,
      )
  );
};

let get_pet_by_id = (~pet_id) => {
  open Lwt;
  let uri = Request.build_uri("/pet/{petId}");
  let headers = Request.default_headers;
  let headers = Cohttp.Header.add(headers, "api_key", Request.api_key);
  let uri = Request.replace_path_param(uri, "petId", Int64.to_string, pet_id);
  Cohttp_lwt_unix.Client.call(`GET, uri, ~headers)
  >>= (
    ((resp, body)) =>
      Request.read_json_body_as(
        JsonSupport.unwrap(Pet.of_yojson),
        resp,
        body,
      )
  );
};

let update_pet = (~body) => {
  open Lwt;
  let uri = Request.build_uri("/pet");
  let headers = Request.default_headers;
  let body = Request.write_as_json_body(Pet.to_yojson, body);
  Cohttp_lwt_unix.Client.call(`PUT, uri, ~headers, ~body)
  >>= (((resp, body)) => Request.handle_unit_response(resp));
};

let update_pet_with_form = (~pet_id, ~name=?, ~status=?, ()) => {
  open Lwt;
  let uri = Request.build_uri("/pet/{petId}");
  let headers = Request.default_headers;
  let uri = Request.replace_path_param(uri, "petId", Int64.to_string, pet_id);
  let body = Request.init_form_encoded_body();
  let body =
    Request.maybe_add_form_encoded_body_param(body, "name", x => x, name);
  let body =
    Request.maybe_add_form_encoded_body_param(body, "status", x => x, status);
  let body = Request.finalize_form_encoded_body(body);
  Cohttp_lwt_unix.Client.call(`POST, uri, ~headers, ~body)
  >>= (((resp, body)) => Request.handle_unit_response(resp));
};

let upload_file = (~pet_id, ~additional_metadata=?, ~file=?, ()) => {
  open Lwt;
  let uri = Request.build_uri("/pet/{petId}/uploadImage");
  let headers = Request.default_headers;
  let uri = Request.replace_path_param(uri, "petId", Int64.to_string, pet_id);
  let body = Request.init_form_encoded_body();
  let body =
    Request.maybe_add_form_encoded_body_param(
      body,
      "additional_metadata",
      x => x,
      additional_metadata,
    );
  let body =
    Request.maybe_add_form_encoded_body_param(body, "file", x => x, file);
  let body = Request.finalize_form_encoded_body(body);
  Cohttp_lwt_unix.Client.call(`POST, uri, ~headers, ~body)
  >>= (
    ((resp, body)) =>
      Request.read_json_body_as(
        JsonSupport.unwrap(Api_response.of_yojson),
        resp,
        body,
      )
  );
};
